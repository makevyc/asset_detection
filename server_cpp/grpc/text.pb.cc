// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: text.proto

#include "text.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace AssetInspection {
constexpr Check::Check(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : target_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CheckDefaultTypeInternal {
  constexpr CheckDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CheckDefaultTypeInternal() {}
  union {
    Check _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CheckDefaultTypeInternal _Check_default_instance_;
constexpr IPResponse::IPResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : delay_(0)
  , loss_(0){}
struct IPResponseDefaultTypeInternal {
  constexpr IPResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IPResponseDefaultTypeInternal() {}
  union {
    IPResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IPResponseDefaultTypeInternal _IPResponse_default_instance_;
constexpr TCPResponse::TCPResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : flag_(false){}
struct TCPResponseDefaultTypeInternal {
  constexpr TCPResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TCPResponseDefaultTypeInternal() {}
  union {
    TCPResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TCPResponseDefaultTypeInternal _TCPResponse_default_instance_;
}  // namespace AssetInspection
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_text_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_text_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_text_2eproto = nullptr;

const uint32_t TableStruct_text_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AssetInspection::Check, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AssetInspection::Check, target_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AssetInspection::IPResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AssetInspection::IPResponse, delay_),
  PROTOBUF_FIELD_OFFSET(::AssetInspection::IPResponse, loss_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AssetInspection::TCPResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AssetInspection::TCPResponse, flag_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::AssetInspection::Check)},
  { 7, -1, -1, sizeof(::AssetInspection::IPResponse)},
  { 15, -1, -1, sizeof(::AssetInspection::TCPResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AssetInspection::_Check_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AssetInspection::_IPResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AssetInspection::_TCPResponse_default_instance_),
};

const char descriptor_table_protodef_text_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\ntext.proto\022\017AssetInspection\"\027\n\005Check\022\016"
  "\n\006target\030\001 \001(\t\")\n\nIPResponse\022\r\n\005delay\030\001 "
  "\001(\005\022\014\n\004loss\030\002 \001(\005\"\033\n\013TCPResponse\022\014\n\004flag"
  "\030\001 \001(\0102\237\001\n\026AssetInspectionService\022@\n\007Che"
  "ckIP\022\026.AssetInspection.Check\032\033.AssetInsp"
  "ection.IPResponse\"\000\022C\n\tCheckPort\022\026.Asset"
  "Inspection.Check\032\034.AssetInspection.TCPRe"
  "sponse\"\000b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_text_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_text_2eproto = {
  false, false, 296, descriptor_table_protodef_text_2eproto, "text.proto", 
  &descriptor_table_text_2eproto_once, nullptr, 0, 3,
  schemas, file_default_instances, TableStruct_text_2eproto::offsets,
  file_level_metadata_text_2eproto, file_level_enum_descriptors_text_2eproto, file_level_service_descriptors_text_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_text_2eproto_getter() {
  return &descriptor_table_text_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_text_2eproto(&descriptor_table_text_2eproto);
namespace AssetInspection {

// ===================================================================

class Check::_Internal {
 public:
};

Check::Check(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:AssetInspection.Check)
}
Check::Check(const Check& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_target().empty()) {
    target_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_target(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:AssetInspection.Check)
}

inline void Check::SharedCtor() {
target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Check::~Check() {
  // @@protoc_insertion_point(destructor:AssetInspection.Check)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Check::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  target_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Check::ArenaDtor(void* object) {
  Check* _this = reinterpret_cast< Check* >(object);
  (void)_this;
}
void Check::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Check::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Check::Clear() {
// @@protoc_insertion_point(message_clear_start:AssetInspection.Check)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Check::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string target = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_target();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AssetInspection.Check.target"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Check::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AssetInspection.Check)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string target = 1;
  if (!this->_internal_target().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target().data(), static_cast<int>(this->_internal_target().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AssetInspection.Check.target");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_target(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AssetInspection.Check)
  return target;
}

size_t Check::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AssetInspection.Check)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string target = 1;
  if (!this->_internal_target().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Check::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Check::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Check::GetClassData() const { return &_class_data_; }

void Check::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Check *>(to)->MergeFrom(
      static_cast<const Check &>(from));
}


void Check::MergeFrom(const Check& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AssetInspection.Check)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_target().empty()) {
    _internal_set_target(from._internal_target());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Check::CopyFrom(const Check& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AssetInspection.Check)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Check::IsInitialized() const {
  return true;
}

void Check::InternalSwap(Check* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &target_, lhs_arena,
      &other->target_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Check::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_text_2eproto_getter, &descriptor_table_text_2eproto_once,
      file_level_metadata_text_2eproto[0]);
}

// ===================================================================

class IPResponse::_Internal {
 public:
};

IPResponse::IPResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:AssetInspection.IPResponse)
}
IPResponse::IPResponse(const IPResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&delay_, &from.delay_,
    static_cast<size_t>(reinterpret_cast<char*>(&loss_) -
    reinterpret_cast<char*>(&delay_)) + sizeof(loss_));
  // @@protoc_insertion_point(copy_constructor:AssetInspection.IPResponse)
}

inline void IPResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&delay_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&loss_) -
    reinterpret_cast<char*>(&delay_)) + sizeof(loss_));
}

IPResponse::~IPResponse() {
  // @@protoc_insertion_point(destructor:AssetInspection.IPResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IPResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IPResponse::ArenaDtor(void* object) {
  IPResponse* _this = reinterpret_cast< IPResponse* >(object);
  (void)_this;
}
void IPResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IPResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IPResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:AssetInspection.IPResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&delay_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&loss_) -
      reinterpret_cast<char*>(&delay_)) + sizeof(loss_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IPResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 delay = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          delay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 loss = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          loss_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IPResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AssetInspection.IPResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 delay = 1;
  if (this->_internal_delay() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_delay(), target);
  }

  // int32 loss = 2;
  if (this->_internal_loss() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_loss(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AssetInspection.IPResponse)
  return target;
}

size_t IPResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AssetInspection.IPResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 delay = 1;
  if (this->_internal_delay() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_delay());
  }

  // int32 loss = 2;
  if (this->_internal_loss() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_loss());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IPResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IPResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IPResponse::GetClassData() const { return &_class_data_; }

void IPResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IPResponse *>(to)->MergeFrom(
      static_cast<const IPResponse &>(from));
}


void IPResponse::MergeFrom(const IPResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AssetInspection.IPResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_delay() != 0) {
    _internal_set_delay(from._internal_delay());
  }
  if (from._internal_loss() != 0) {
    _internal_set_loss(from._internal_loss());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IPResponse::CopyFrom(const IPResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AssetInspection.IPResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IPResponse::IsInitialized() const {
  return true;
}

void IPResponse::InternalSwap(IPResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IPResponse, loss_)
      + sizeof(IPResponse::loss_)
      - PROTOBUF_FIELD_OFFSET(IPResponse, delay_)>(
          reinterpret_cast<char*>(&delay_),
          reinterpret_cast<char*>(&other->delay_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IPResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_text_2eproto_getter, &descriptor_table_text_2eproto_once,
      file_level_metadata_text_2eproto[1]);
}

// ===================================================================

class TCPResponse::_Internal {
 public:
};

TCPResponse::TCPResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:AssetInspection.TCPResponse)
}
TCPResponse::TCPResponse(const TCPResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  flag_ = from.flag_;
  // @@protoc_insertion_point(copy_constructor:AssetInspection.TCPResponse)
}

inline void TCPResponse::SharedCtor() {
flag_ = false;
}

TCPResponse::~TCPResponse() {
  // @@protoc_insertion_point(destructor:AssetInspection.TCPResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TCPResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TCPResponse::ArenaDtor(void* object) {
  TCPResponse* _this = reinterpret_cast< TCPResponse* >(object);
  (void)_this;
}
void TCPResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TCPResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TCPResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:AssetInspection.TCPResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  flag_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TCPResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool flag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TCPResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AssetInspection.TCPResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool flag = 1;
  if (this->_internal_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_flag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AssetInspection.TCPResponse)
  return target;
}

size_t TCPResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AssetInspection.TCPResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool flag = 1;
  if (this->_internal_flag() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TCPResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TCPResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TCPResponse::GetClassData() const { return &_class_data_; }

void TCPResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TCPResponse *>(to)->MergeFrom(
      static_cast<const TCPResponse &>(from));
}


void TCPResponse::MergeFrom(const TCPResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AssetInspection.TCPResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_flag() != 0) {
    _internal_set_flag(from._internal_flag());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TCPResponse::CopyFrom(const TCPResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AssetInspection.TCPResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCPResponse::IsInitialized() const {
  return true;
}

void TCPResponse::InternalSwap(TCPResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(flag_, other->flag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TCPResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_text_2eproto_getter, &descriptor_table_text_2eproto_once,
      file_level_metadata_text_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace AssetInspection
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::AssetInspection::Check* Arena::CreateMaybeMessage< ::AssetInspection::Check >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AssetInspection::Check >(arena);
}
template<> PROTOBUF_NOINLINE ::AssetInspection::IPResponse* Arena::CreateMaybeMessage< ::AssetInspection::IPResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AssetInspection::IPResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::AssetInspection::TCPResponse* Arena::CreateMaybeMessage< ::AssetInspection::TCPResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AssetInspection::TCPResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
