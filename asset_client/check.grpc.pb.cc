// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: check.proto

#include "check.pb.h"
#include "check.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace AssetInspection {

static const char* AssetInspectionService_method_names[] = {
  "/AssetInspection.AssetInspectionService/CheckIP",
  "/AssetInspection.AssetInspectionService/CheckPort",
};

std::unique_ptr< AssetInspectionService::Stub> AssetInspectionService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< AssetInspectionService::Stub> stub(new AssetInspectionService::Stub(channel, options));
  return stub;
}

AssetInspectionService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CheckIP_(AssetInspectionService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CheckPort_(AssetInspectionService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status AssetInspectionService::Stub::CheckIP(::grpc::ClientContext* context, const ::AssetInspection::Check& request, ::AssetInspection::IPResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::AssetInspection::Check, ::AssetInspection::IPResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CheckIP_, context, request, response);
}

void AssetInspectionService::Stub::async::CheckIP(::grpc::ClientContext* context, const ::AssetInspection::Check* request, ::AssetInspection::IPResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::AssetInspection::Check, ::AssetInspection::IPResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckIP_, context, request, response, std::move(f));
}

void AssetInspectionService::Stub::async::CheckIP(::grpc::ClientContext* context, const ::AssetInspection::Check* request, ::AssetInspection::IPResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckIP_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::AssetInspection::IPResponse>* AssetInspectionService::Stub::PrepareAsyncCheckIPRaw(::grpc::ClientContext* context, const ::AssetInspection::Check& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::AssetInspection::IPResponse, ::AssetInspection::Check, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CheckIP_, context, request);
}

::grpc::ClientAsyncResponseReader< ::AssetInspection::IPResponse>* AssetInspectionService::Stub::AsyncCheckIPRaw(::grpc::ClientContext* context, const ::AssetInspection::Check& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCheckIPRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AssetInspectionService::Stub::CheckPort(::grpc::ClientContext* context, const ::AssetInspection::Check& request, ::AssetInspection::TCPResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::AssetInspection::Check, ::AssetInspection::TCPResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CheckPort_, context, request, response);
}

void AssetInspectionService::Stub::async::CheckPort(::grpc::ClientContext* context, const ::AssetInspection::Check* request, ::AssetInspection::TCPResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::AssetInspection::Check, ::AssetInspection::TCPResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckPort_, context, request, response, std::move(f));
}

void AssetInspectionService::Stub::async::CheckPort(::grpc::ClientContext* context, const ::AssetInspection::Check* request, ::AssetInspection::TCPResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckPort_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::AssetInspection::TCPResponse>* AssetInspectionService::Stub::PrepareAsyncCheckPortRaw(::grpc::ClientContext* context, const ::AssetInspection::Check& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::AssetInspection::TCPResponse, ::AssetInspection::Check, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CheckPort_, context, request);
}

::grpc::ClientAsyncResponseReader< ::AssetInspection::TCPResponse>* AssetInspectionService::Stub::AsyncCheckPortRaw(::grpc::ClientContext* context, const ::AssetInspection::Check& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCheckPortRaw(context, request, cq);
  result->StartCall();
  return result;
}

AssetInspectionService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AssetInspectionService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AssetInspectionService::Service, ::AssetInspection::Check, ::AssetInspection::IPResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AssetInspectionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::AssetInspection::Check* req,
             ::AssetInspection::IPResponse* resp) {
               return service->CheckIP(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AssetInspectionService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AssetInspectionService::Service, ::AssetInspection::Check, ::AssetInspection::TCPResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AssetInspectionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::AssetInspection::Check* req,
             ::AssetInspection::TCPResponse* resp) {
               return service->CheckPort(ctx, req, resp);
             }, this)));
}

AssetInspectionService::Service::~Service() {
}

::grpc::Status AssetInspectionService::Service::CheckIP(::grpc::ServerContext* context, const ::AssetInspection::Check* request, ::AssetInspection::IPResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AssetInspectionService::Service::CheckPort(::grpc::ServerContext* context, const ::AssetInspection::Check* request, ::AssetInspection::TCPResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace AssetInspection

